<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algo on Chanhz&#39;s Blog</title>
    <link>https://chanhz.github.io/tags/algo/</link>
    <description>Recent content in algo on Chanhz&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 29 May 2019 15:26:18 +0800</lastBuildDate><atom:link href="https://chanhz.github.io/tags/algo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang封装BitMap</title>
      <link>https://chanhz.github.io/posts/bitmap/</link>
      <pubDate>Wed, 29 May 2019 15:26:18 +0800</pubDate>
      
      <guid>https://chanhz.github.io/posts/bitmap/</guid>
      <description>BitMap用位来实现集合元素的查找、去重，在处理海量数据时拥有良好的空间复杂度。
场景 from《编程珠玑》：
 给一台普通PC，2G内存，要求处理一个包含40亿个不重复并且没有排过序的无符号的int整数，给出一个整数，问如果快速地判断这个整数是否在文件40亿个数据当中？
 方法一：使用 map[uint32]bool 无符号整数的区间范围是[0,4294967295],
使用整数作key，bool 作值，40亿个整数的需要：
40亿*byte 约等于 4GB.满足不了需求。
方法二： BitMap 申请一个 uint64 的数组，每个数的二进制值可以代表64个数。
40亿*bit 约等于 512 MB.
简单实现：
package bitmap import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; ) // BitMap 用以解决海量数据寻找重复 // 判断个别元素是否在海量数据当中 type Bitmap struct { words []uint64 // 用该数组作为集合存储40亿个整数  length int } func New() *Bitmap { return &amp;amp;Bitmap{} } func (bitmap *Bitmap) Has(num int) bool { word, bit := num/64, uint(num%64) return word &amp;lt; len(bitmap.</description>
    </item>
    
  </channel>
</rss>
