<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Chanhz&#39;s Blog</title>
		<link>https://chanhz.github.io/posts/</link>
		<description>Recent content in Posts on Chanhz&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 29 May 2019 15:26:18 +0800</lastBuildDate>
		<atom:link href="https://chanhz.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Golang封装BitMap</title>
			<link>https://chanhz.github.io/posts/bitmap/</link>
			<pubDate>Wed, 29 May 2019 15:26:18 +0800</pubDate>
			
			<guid>https://chanhz.github.io/posts/bitmap/</guid>
			<description>BitMap用位来实现集合元素的查找、去重，在处理海量数据时拥有良好的空间复杂度。
场景 from《编程珠玑》：
 给一台普通PC，2G内存，要求处理一个包含40亿个不重复并且没有排过序的无符号的int整数，给出一个整数，问如果快速地判断这个整数是否在文件40亿个数据当中？
 方法一：使用 map[uint32]bool 无符号整数的区间范围是[0,4294967295],
使用整数作key，bool 作值，40亿个整数的需要：
40亿*byte 约等于 4GB.满足不了需求。
方法二： BitMap 申请一个 uint64 的数组，每个数的二进制值可以代表64个数。
40亿*bit 约等于 512 MB.
简单实现：
package bitmap import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; ) // BitMap 用以解决海量数据寻找重复 // 判断个别元素是否在海量数据当中 type Bitmap struct { words []uint64 // 用该数组作为集合存储40亿个整数  length int } func New() *Bitmap { return &amp;amp;Bitmap{} } func (bitmap *Bitmap) Has(num int) bool { word, bit := num/64, uint(num%64) return word &amp;lt; len(bitmap.</description>
			<content type="html"><![CDATA[<p>BitMap用位来实现集合元素的查找、去重，在处理海量数据时拥有良好的空间复杂度。</p>
<p>场景 from《编程珠玑》：</p>
<blockquote>
<p>给一台普通PC，2G内存，要求处理一个包含40亿个不重复并且没有排过序的无符号的int整数，给出一个整数，问如果快速地判断这个整数是否在文件40亿个数据当中？</p>
</blockquote>
<h3 id="方法一使用-mapuint32bool">方法一：使用 map[uint32]bool</h3>
<p>无符号整数的区间范围是[0,4294967295],</p>
<p>使用整数作key，bool 作值，40亿个整数的需要：</p>
<p>40亿*byte 约等于 4GB.满足不了需求。</p>
<h3 id="方法二-bitmap">方法二： BitMap</h3>
<p>申请一个 uint64 的数组，每个数的二进制值可以代表64个数。</p>
<p>40亿*bit 约等于 512 MB.</p>
<p>简单实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">bitmap</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;bytes&#34;</span>
    <span class="s">&#34;fmt&#34;</span>
<span class="p">)</span>
<span class="c1">// BitMap 用以解决海量数据寻找重复
</span><span class="c1">// 判断个别元素是否在海量数据当中
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Bitmap</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">words</span>  <span class="p">[]</span><span class="kt">uint64</span> <span class="c1">// 用该数组作为集合存储40亿个整数
</span><span class="c1"></span>    <span class="nx">length</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">New</span><span class="p">()</span> <span class="o">*</span><span class="nx">Bitmap</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="nx">Bitmap</span><span class="p">{}</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">bitmap</span> <span class="o">*</span><span class="nx">Bitmap</span><span class="p">)</span> <span class="nf">Has</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="nx">word</span><span class="p">,</span> <span class="nx">bit</span> <span class="o">:=</span> <span class="nx">num</span><span class="o">/</span><span class="mi">64</span><span class="p">,</span> <span class="nb">uint</span><span class="p">(</span><span class="nx">num</span><span class="o">%</span><span class="mi">64</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">word</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">bitmap</span><span class="p">.</span><span class="nx">words</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">bitmap</span><span class="p">.</span><span class="nx">words</span><span class="p">[</span><span class="nx">word</span><span class="p">]</span><span class="o">&amp;</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="nx">bit</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">bitmap</span> <span class="o">*</span><span class="nx">Bitmap</span><span class="p">)</span> <span class="nf">Add</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// word 为数组指针
</span><span class="c1"></span>    <span class="c1">// bit 为数组元素位的指针
</span><span class="c1"></span>    <span class="nx">word</span><span class="p">,</span> <span class="nx">bit</span> <span class="o">:=</span> <span class="nx">num</span><span class="o">/</span><span class="mi">64</span><span class="p">,</span> <span class="nb">uint</span><span class="p">(</span><span class="nx">num</span><span class="o">%</span><span class="mi">64</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">word</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">bitmap</span><span class="p">.</span><span class="nx">words</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">bitmap</span><span class="p">.</span><span class="nx">words</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">bitmap</span><span class="p">.</span><span class="nx">words</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><span class="c1">// 分配新的 word，初始化为0
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="c1">// 判断num是否已经存在bitmap中
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">bitmap</span><span class="p">.</span><span class="nx">words</span><span class="p">[</span><span class="nx">word</span><span class="p">]</span><span class="o">&amp;</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="nx">bit</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span> <span class="c1">// val &amp; 10000 如果为 0 说明不存在
</span><span class="c1"></span>        <span class="nx">bitmap</span><span class="p">.</span><span class="nx">words</span><span class="p">[</span><span class="nx">word</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="nx">bit</span> <span class="c1">// 将该值置为 1 | 或运算符可以保留原数据，并将0值置为 1
</span><span class="c1"></span>        <span class="nx">bitmap</span><span class="p">.</span><span class="nx">length</span><span class="o">++</span>             
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">bitmap</span> <span class="o">*</span><span class="nx">Bitmap</span><span class="p">)</span> <span class="nf">Delete</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">word</span><span class="p">,</span> <span class="nx">bit</span> <span class="o">:=</span> <span class="nx">num</span><span class="o">/</span><span class="mi">64</span><span class="p">,</span> <span class="nb">uint</span><span class="p">(</span><span class="nx">num</span><span class="o">%</span><span class="mi">64</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">word</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">bitmap</span><span class="p">.</span><span class="nx">words</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="c1">// 判断num是否已经存在bitmap中
</span><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;1 &lt;&lt; %d = %b\n&#34;</span><span class="p">,</span> <span class="nx">bit</span><span class="p">,</span> <span class="mi">1</span><span class="o">&lt;&lt;</span><span class="nx">bit</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;^(1 &lt;&lt; %d) = %b\n&#34;</span><span class="p">,</span> <span class="nx">bit</span><span class="p">,</span> <span class="nb">uint64</span><span class="p">(^(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="nx">bit</span><span class="p">)))</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;bitmap.words[word] = %b\n&#34;</span><span class="p">,</span><span class="nx">bitmap</span><span class="p">.</span><span class="nx">words</span><span class="p">[</span><span class="nx">word</span><span class="p">])</span>
    <span class="k">if</span> <span class="nx">bitmap</span><span class="p">.</span><span class="nx">words</span><span class="p">[</span><span class="nx">word</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="o">&lt;&lt;</span><span class="nx">bit</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span> <span class="c1">// val &amp; 10000 如果为 0 说明不存在
</span><span class="c1"></span>        <span class="nx">bitmap</span><span class="p">.</span><span class="nx">words</span><span class="p">[</span><span class="nx">word</span><span class="p">]</span> <span class="o">&amp;=</span> <span class="p">^(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="nx">bit</span><span class="p">)</span> <span class="c1">// 取反,相与 01111
</span><span class="c1"></span>        <span class="nx">bitmap</span><span class="p">.</span><span class="nx">length</span><span class="o">--</span>               
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">bitmap</span> <span class="o">*</span><span class="nx">Bitmap</span><span class="p">)</span> <span class="nf">Len</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">bitmap</span><span class="p">.</span><span class="nx">length</span>
<span class="p">}</span>

<span class="c1">// 输出集合元素
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">bitmap</span> <span class="o">*</span><span class="nx">Bitmap</span><span class="p">)</span> <span class="nf">String</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">buf</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
    <span class="nx">buf</span><span class="p">.</span><span class="nf">WriteByte</span><span class="p">(</span><span class="sc">&#39;{&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">bitmap</span><span class="p">.</span><span class="nx">words</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">v</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="k">continue</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="nb">uint</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="mi">64</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span> <span class="c1">// j 是 bit 的位置
</span><span class="c1"></span>            <span class="k">if</span> <span class="nx">v</span><span class="o">&amp;</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="nx">j</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
                <span class="k">if</span> <span class="nx">buf</span><span class="p">.</span><span class="nf">Len</span><span class="p">()</span> <span class="p">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="s">&#34;{&#34;</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">buf</span><span class="p">.</span><span class="nf">WriteByte</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">buf</span><span class="p">,</span> <span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="mi">64</span><span class="o">*</span><span class="nb">uint</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">+</span><span class="nx">j</span><span class="p">)</span> <span class="c1">// i 是 word的指针， j 是 bit 的指针
</span><span class="c1"></span>            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">buf</span><span class="p">.</span><span class="nf">WriteByte</span><span class="p">(</span><span class="sc">&#39;}&#39;</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">buf</span><span class="p">,</span><span class="s">&#34;\nLength: %d&#34;</span><span class="p">,</span> <span class="nx">bitmap</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">buf</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div><p>Refer</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/37285799">golang bitmap(位图)</a></li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
